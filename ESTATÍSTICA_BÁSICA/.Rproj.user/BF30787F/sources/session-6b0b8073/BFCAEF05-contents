read_map = function(filename) {
  
  zz <- file(filename,"rb")
  #
  # header do .map
  #
  versao <- readBin(zz,"integer",1,size=2)  # 100 = versao 1.00
  #Bounding Box
  Leste <- readBin(zz,"numeric",1,size=4)
  Norte <- readBin(zz,"numeric",1,size=4)
  Oeste <- readBin(zz,"numeric",1,size=4)
  Sul <- readBin(zz,"numeric",1,size=4)
  
  geocodigo <- NULL
  nome <- NULL
  xleg <- 0
  yleg <- 0
  sede <- FALSE
  poli <- list()
  i <- 0
  
  #
  # repete para cada objeto no arquivo
  #
  repeat{  
    
    tipoobj = readBin(zz,"integer",1,size=1) # 0=Poligono, 1=PoligonoComSede, 2=Linha, 3=Ponto
    
    if (length(tipoobj) == 0) break
    
    i <- i + 1
    
    Len <- readBin(zz, "integer", 1, size=1)  # length byte da string Pascal
    geocodigo[i] <- readChar(zz, 10, useBytes = TRUE)
    Len <- readBin(zz, "integer", 1, size=1)  # length byte da string Pascal
    nome_bytes <- readBin(zz, "raw", 25)
    nome[i] <- iconv(nome_bytes, "UTF-8", "ASCII", sub = "")
    xleg[i] <- readBin(zz, "numeric", 1, size=4)
    yleg[i] <- readBin(zz, "numeric", 1, size=4)
    numpontos <- readBin(zz, "integer", 1, size=2)
    
    sede <- sede || (tipoobj == 1)
    
    x <- 0
    y <- 0
    
    for (j in 1:numpontos){
      x[j] <- readBin(zz, "numeric", 1, size=4)
      y[j] <- readBin(zz, "numeric", 1, size=4)
    }
    
    
    # NAs separam vários polígonos no mesmo objeto
    # BUG a corrigir: Assim como está o primeiro polígono não fecha e, em multiplos poligonos, há um NA a mais no final 
    xInic <- x[1]
    yInic <- y[1]  
    
    for (j in 2:numpontos) {
      if (x[j] == xInic & y[j] == yInic) {x[j]=NA; y[j] = NA}
    }
    
    poli[[i]] <- c(x,y)
    dim(poli[[i]]) <- c(numpontos,2)
  }
  
  class(poli) <- "polylist"
  attr(poli,"region.id") <- geocodigo
  attr(poli,"region.name") <- nome
  attr(poli,"centroid") <- list(x=xleg,y=yleg)
  attr(poli,"sede") <- sede
  attr(poli,"maplim") <- list(x=c(Oeste,Leste),y=c(Sul,Norte))
  
  close(zz)
  
  df <- NULL
  
  # Cria um dataframe com a polilist
  poli2df <- function(k) {
    df <- do.call(rbind, lapply(seq_along(k), function(i) {
      data.frame(
        x = k[[i]][, 1],
        y = k[[i]][, 2],
        id = as.factor(nome[i])
      )
    }))
  }
  
  df <- poli2df(k=poli)
  return(df)
  
}
